/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// layers
#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define QWERTY 3

/ {
    behaviors {
      // define mod per key
      #ifndef PINKY_FINGER_MOD
       #define PINKY_FINGER_MOD LGUI
      #endif

      #ifndef RING1_FINGER_MOD
       #define RING1_FINGER_MOD LAlT
      #endif

      #ifndef RING2_FINGER_MOD
       #define RING2_FINGER_MOD RALT
      #endif

      #ifndef MIDDY_FINGER_MOD
       #define MIDDY_FINGER_MOD LSFT
      #endif

      #ifndef INDEX_FINGER_MOD
       #define INDEX_FINGER_MOD LCTL
      #endif

      // assign mods to each side

      #ifndef LEFT_PINKY_MOD
      #define LEFT_PINKY_MOD PINKY_FINGER_MOD
      #endif
      #ifndef RIGHT_PINKY_MOD
      #define RIGHT_PINKY_MOD PINKY_FINGER_MOD
      #endif

      #ifndef LEFT_RING1_MOD
      #define LEFT_RING1_MOD RING1_FINGER_MOD
      #endif
      #ifndef  RIGHT_RING1_MOD
      #define RIGHT_RING1_MOD RING1_FINGER_MOD
      #endif

      #ifndef LEFT_RING2_MOD
      #define LEFT_RING2_MOD RING2_FINGER_MOD
      #endif
      #ifndef RIGHT_RING2_MOD
      #define RIGHT_RING2_MOD RING2_FINGER_MOD
      #endif

      #ifndef LEFT_MIDDY_MOD
      #define LEFT_MIDDY_MOD MIDDY_FINGER_MOD
      #endif
      #ifndef RIGHT_MIDDY_MOD
      #define RIGHT_MIDDY_MOD MIDDY_FINGER_MOD
      #endif

      #ifndef LEFT_INDEX_MOD
      #define LEFT_INDEX_MOD INDEX_FINGER_MOD
      #endif
      #ifndef RIGHT_INDEX_MOD
      #define RIGHT_INDEX_MOD INDEX_FINGER_MOD
      #endif

      // left_pinky: homey_left_pinky {
      //   compatible = "zmk,behavior-hold-tap";
      //   flavor = LEFT_PINKY_HOLDING_TYPE;
      //   hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
      //   hold-trigger-on-release; // wait for other home row mods
      //   tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
      //   #ifdef ENABLE_KEY_REPEAT
      //   quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
      //   #endif
      //   require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
      //   #binding-cells = <2>;
      //   #ifdef ENFORCE_BILATERAL
      //   bindings = <&left_pinky_hold>, <&kp>;
      //   #else
      //   bindings = <&kp>, <&kp>;
      //   #endif
      // };

      // #define LeftPinky(key) left_pinky LEFT_PINKY_MOD key
      // #define LeftPinky(key) left_pinky LEFT_PINKY_MOD key
      // #define LeftPinky(key) left_pinky LEFT_PINKY_MOD key
      // #define LeftPinky(key) left_pinky LEFT_PINKY_MOD key
      // #define LeftPinky(key) left_pinky LEFT_PINKY_MOD key

      // right_pinky: homey_right_pinky {
      //   compatible = "zmk,behavior-hold-tap";
      //   flavor = RIGHT_PINKY_HOLDING_TYPE;
      //   hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
      //   hold-trigger-on-release; // wait for other home row mods
      //   tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
      //   #ifdef ENABLE_KEY_REPEAT
      //   quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
      //   #endif
      //   require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
      //   #binding-cells = <2>;
      //   #ifdef ENFORCE_BILATERAL
      //   bindings = <&right_pinky_hold>, <&kp>;
      //   #else
      //   bindings = <&kp>, <&kp>;
      //   #endif
      // };

      // #define RightPinky(key) right_pinky RIGHT_PINKY_MOD key
      // #define RightPinky(key) right_pinky RIGHT_PINKY_MOD key
      // #define RightPinky(key) right_pinky RIGHT_PINKY_MOD key
      // #define RightPinky(key) right_pinky RIGHT_PINKY_MOD key
      // #define RightPinky(key) right_pinky RIGHT_PINKY_MOD key
      // };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        base_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  B  |  L  |  D   |  W   |  Z   |                                                 |  '   |   F   |   O   |  U   |   J   |   \  |
            // |  ESC  |  N  |  R  |  T   |  S   |  G   |                                                 |  Y   |   H   |   A   |  E   |   I   |   '  |
            // |   `   |  Q  |  X  |  M   |  C   |  V   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  K   |   P   |   .   |  ,   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
            &kp F1         &kp F2   &kp F3      &kp F4      &kp F5                                                                                          &kp F6  &kp F7      &kp F8      &kp F9      &kp F10
            &kp EQUAL      &kp N1   &kp N2      &kp N3      &kp N4      &kp N5                                                                         &kp N6   &kp N7  &kp N8      &kp N9      &kp N0      &kp MINUS
            &kp TAB        &kp B    &kp L       &kp D       &kp W       &kp Z                                                                          &kp SQT  &kp F   &kp O       &kp U       &kp J       &kp BSLH
            &kp ESC        &mt LGUI N    &mt LALT R       &mt LSHFT T       &mt LCTRL S       &kp G                                                                          &kp Y    &mt RCTRL H   &mt RSHFT A       &mt LALT E       &mt LGUI I       &kp SQT
            &kp GRAVE      &kp Q    &kp X       &kp M       &kp C       &kp V   &kp ENTER  &kp LEFT   &kp RIGHT &kp DOWN  &kp UP       &kp ESC         &kp K    &kp P   &kp DOT     &kp COMMA   &kp FSLH    &kp PG_UP
            &mo MAGIC      &kp HOME &kp END     &kp LEFT    &kp RIGHT           &kp SPACE  &kp TAB    &kp LALT  &kp RALT  &kp DELETE   &kp BACKSPACE            &kp UP  &kp DOWN    &kp LBKT    &kp RBKT    &kp PG_DN
            >;
        };

        qwerty_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
            &kp F1         &kp F2   &kp F3      &kp F4      &kp F5                                                                                         &kp F6  &kp F7      &kp F8      &kp F9      &kp F10
            &kp EQUAL      &kp N1   &kp N2      &kp N3      &kp N4      &kp N5                                                                     &kp N6  &kp N7  &kp N8      &kp N9      &kp N0      &kp MINUS
            &kp TAB        &kp Q    &kp W       &kp E       &kp R       &kp T                                                                      &kp Y   &kp U   &kp I       &kp O       &kp P       &kp BSLH
            &kp ESC        &kp A    &kp S       &kp D       &kp F       &kp G                                                                      &kp H   &kp J   &kp K       &kp L       &kp SEMI    &kp SQT
            &kp GRAVE      &kp Z    &kp X       &kp C       &kp V       &kp B   &kp LSHFT   &kp LCTRL   &layer_td  &kp LGUI  &kp RCTRL &kp RSHFT   &kp N   &kp M   &kp COMMA   &kp DOT     &kp FSLH    &kp PG_UP
            &mo MAGIC      &kp HOME &kp END     &kp LEFT    &kp RIGHT           &kp BSPC    &kp DEL     &kp LALT   &kp RALT  &kp RET   &kp SPACE           &kp UP  &kp DOWN    &kp LBKT    &kp RBKT    &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
            &kp C_BRI_DN      &kp C_BRI_UP        &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                                           &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP  &none           &kp PAUSE_BREAK
            &trans            &none               &none           &none           &none           &kp HOME                                                                              &kp LPAR     &kp KP_NUM   &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
            &trans            &none               &none           &kp UP          &none           &kp END                                                                               &kp RPAR     &kp KP_N7    &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp SLCK
            &trans            &none               &kp LEFT        &kp DOWN        &kp RIGHT       &kp PG_UP                                                                             &kp PRCNT    &kp KP_N4    &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &none
            &trans            &kp K_CMENU         &none           &kp F11         &kp F12         &kp PG_DN       &trans      &trans      &to DEFAULT &trans      &trans      &trans    &kp COMMA    &kp KP_N1    &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &trans
            &trans            &kp CAPS            &kp INS         &kp F11         &kp F12                         &trans      &trans      &trans      &trans      &trans      &trans                 &kp KP_N0    &kp KP_N0    &kp KP_DOT    &kp KP_ENTER    &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &none
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &none
            >;
        };
    };
};
